{
    "swagger": "2.0",
    "info": {
        "description": "Tiger service API for tiger management and recording system",
        "title": "Tiger service API",
        "contact": {},
        "version": "1.0"
    },
    "host": "tiger-backend-api-app.onrender.com",
    "basePath": "/api/v1",
    "paths": {
        "/sight": {
            "get": {
                "description": "Sorted by the last time the tigers were seen.\nSupports pagination with page number and limit(number of records to fetch).\nPage and Limit must be valid integer. Default values: page - 1, limit - 5",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sighting"
                ],
                "summary": "List All Sighting of Tigers",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Page number to be fetched",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Number of records to be fetched",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.ListSightingResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/interceptor.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/interceptor.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Records last sighting of a tiger\nNew sighting notifies all the user who reported a sighting for the same tiger in past.\nWill respond with conflict(409) status, If the previous sighting of the same tiger was within the 5 KM.\nNOTE: Access Token needed in Authorization header",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sighting"
                ],
                "summary": "Create a new sighting of a tiger",
                "parameters": [
                    {
                        "type": "number",
                        "name": "lat",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "number",
                        "name": "lon",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "seenAt",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "name": "tigerId",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Tiger Image file \u003c 6 MB",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/interceptor.Response"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/interceptor.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/interceptor.Response"
                        }
                    }
                }
            }
        },
        "/tiger": {
            "get": {
                "description": "Sorted by the last time the tigers were seen.\nSupports pagination with page number and limit(number of records to fetch).\nPage and Limit must be valid integer. Default values: page - 1, limit - 5",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tiger"
                ],
                "summary": "List All Tigers",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Page number to be fetched",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Number of records to be fetched",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.ListTigerResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/interceptor.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/interceptor.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new tiger, Tiger name must be unique.\nD.O.B must be a string in format of \"yyyy-mm-dd\", ex: \"2020-07-17\".\nLast Seen must be a string representing UTC Date-Time in ISO 8601 format, ex: \"2023-02-12T14:58:46Z\".\nLat and Lon must valid decimal values, ex: 35.083742442502925, 78.52220233592793\nNOTE: Access Token needed in Authorization header",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tiger"
                ],
                "summary": "Create Tiger",
                "parameters": [
                    {
                        "description": "Tiger Details",
                        "name": "tiger",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TigerCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/interceptor.Response"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/interceptor.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/interceptor.Response"
                        }
                    }
                }
            }
        },
        "/user": {
            "post": {
                "description": "Creates a new user\nPassword Must be 5 character or more",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "User Signup",
                "parameters": [
                    {
                        "description": "User Details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SignupRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/interceptor.Response"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/interceptor.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/interceptor.Response"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Log the user in by returning the API access_token (JWT)\nUse the access_token in further API calls inside Authorization Header",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "User Creds",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/interceptor.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/interceptor.Response"
                        }
                    }
                }
            }
        },
        "/user/refresh": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Refreshes the user access token by providing a new/fresh access token.\nToken refresh only happens within 1 hour of current token expiry\nNOTE: Access Token needed in Authorization header",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "User Token Refresh",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/interceptor.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/interceptor.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.Coordinate": {
            "type": "object",
            "required": [
                "lat",
                "lon"
            ],
            "properties": {
                "lat": {
                    "type": "number"
                },
                "lon": {
                    "type": "number"
                }
            }
        },
        "dto.ListSightingResponse": {
            "type": "object",
            "required": [
                "id",
                "image",
                "lat",
                "lon",
                "seenAt",
                "tigerId"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "lat": {
                    "type": "number"
                },
                "lon": {
                    "type": "number"
                },
                "seenAt": {
                    "type": "string"
                },
                "tigerId": {
                    "type": "integer"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "dto.ListTigerResponse": {
            "type": "object",
            "required": [
                "coordinate",
                "dob",
                "id",
                "lastSeen",
                "name"
            ],
            "properties": {
                "coordinate": {
                    "$ref": "#/definitions/dto.Coordinate"
                },
                "dob": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lastSeen": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 5
                }
            }
        },
        "dto.LoginResponse": {
            "type": "object",
            "required": [
                "access_token"
            ],
            "properties": {
                "access_token": {
                    "type": "string"
                }
            }
        },
        "dto.SignupRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "userName"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 5
                },
                "userName": {
                    "type": "string"
                }
            }
        },
        "dto.TigerCreateRequest": {
            "type": "object",
            "required": [
                "coordinate",
                "dob",
                "lastSeen",
                "name"
            ],
            "properties": {
                "coordinate": {
                    "$ref": "#/definitions/dto.Coordinate"
                },
                "dob": {
                    "type": "string"
                },
                "lastSeen": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "interceptor.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {},
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Description for what is this security definition being used",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}